#-------------------------------------------------------------------------------
# Name:         ismir2010.py
# Purpose:      Examples for ISMIR 2010 paper
#
# Authors:      Christopher Ariza
#               Michael Scott Cuthbert
#
# Copyright:    (c) 2009-2010 The music21 Project
# License:      LGPL
#-------------------------------------------------------------------------------


from music21 import *

def example2():
    handel = corpus.parse('hwv56/movement3-05.md')
    fe = features.jSymbolic.TripleMeterFeature(handel)
    print fe.extract().vector

    soft = converter.parse("http://static.wikifonia.org/10699/musicxml.xml")
    fe.setData(soft)
    print fe.extract().vector

class MusicaFictaFeature(features.FeatureExtractor):
    name = 'Musica Ficta'
    discrete = False
    dimensions = 1
    
    def _process(self):
        allPitches = self._src.flat.pitches
        fictaPitches = 0
        for p in allPitches:
            if p.name == "B-":
                continue
            elif p.accidental is not None and p.accidental.name != 'natural':
                fictaPitches += 1
        self._feature.vector[0] = \
           fictaPitches / float(len(allPitches))
            
def testFictaFeature():
    luca = corpus.parse('luca/gloria.mxl')
    fe = MusicaFictaFeature(luca)
    print fe.extract().vector
    mv = corpus.parse('monteverdi/madrigal.3.1.xml')
    fe.setData(mv)
    print fe.extract().vector

def testDataSet():
    fes = features.extractorsById(['ql1','ql2','ql3'])
    ds = features.DataSet(classLabel='Composer')
    ds.addFeatureExtractors(fes)
    
    b1 = corpus.parse('bwv1080', 7).measures(0,50)
    ds.addData(b1, classValue='Bach', id='artOfFugue')
    ds.addData('bwv66.6.xml', classValue='Bach')
#    ds.addData('c:/handel/hwv56/movement3-05.md', 
    ds.addData('hwv56/movement3-05.md', 
                    classValue='Handel')
    ds.addData('http://www.midiworld.com/midis/other/handel/gfh-jm01.mid')
    ds.process()
    print ds.getAttributeLabels()
    ds.write('d:/desktop/baroqueQLs.csv')
    fList = ds.getFeaturesAsList()
    print fList[0]
    print features.OutputTabOrange(ds).getString()
    for i in range(len(fList)):
        # display scores as pngs generated by Lilypond 
        # if the most common note is an eighth note (0.5)
        # (finds the two Handel scores)
        if fList[i][2] == 0.5:
            pass
#            ds.streams[i].show('lily.png')

    p = graph.PlotFeatures(ds.streams, fes[1:], roundDigits = 2)
    p.process()

def prepareChinaEurope():
    featureExtractors = features.extractorsById(['r31', 'r32', 'r33', 'r34', 'r35', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9', 'p10', 'p11', 'p12', 'p13', 'p14', 'p15', 'p16', 'p19', 'p20', 'p21'])

    oChina1 = corpus.parse('essenFolksong/han1')
    oCEurope1 = corpus.parse('essenFolksong/boehme10')

    ds = features.DataSet(classLabel='Region')
    ds.addFeatureExtractors(featureExtractors)
        
    # add works, defining the class value 
    for w in oChina1.scores:
        id = 'essenFolksong/%s-%s' % ('han1', w.metadata.number)
        ds.addData(w, classValue='China', id=id)

    for w in oCEurope1.scores:
        id = 'essenFolksong/%s-%s' % ('europe1', w.metadata.number)
        ds.addData(w, classValue='CentralEurope', id=id)
    # process with all feature extractors, store all features
    ds.process()
    ds.write('d:/desktop/1a.tab')

def testChinaEurope():
    import orange, orngTree
    data1 = orange.ExampleTable('d:/desktop/1.tab')
    data2 = orange.ExampleTable('d:/desktop/2.tab')

    learners = {}
    learners['maj'] = orange.MajorityLearner
    learners['bayes'] = orange.BayesLearner
    learners['tree'] = orngTree.TreeLearner
    learners['knn'] = orange.kNNLearner

    for cName in learners.keys():
        cType = learners[cName]
        for cData, cStr, matchData, matchStr in [
                                                 (data1, 'file1', data2, 'file2'),
                                                 (data2, 'file2', data1, 'file1'),
                                                 ]:
            # train with data1
            classifier = cType(cData)
            mismatch = 0
            for i in range(len(matchData)):
                c = classifier(matchData[i])
                if c != matchData[i].getclass():
                    mismatch += 1
            print('%s %s: misclassified %s/%s of %s' % (cStr, cName, mismatch, len(matchData),  matchStr))

def tinyNotationBass():
    bass1 = tinyNotation.TinyNotationStream('C4 D8_6 E8_6 F4 G4_7 c1', '4/4')
    #bass1.show('lily.png')
    fbLine1 = figuredBass.realizer.figuredBassFromStream(bass1)
    fbLine1.showAllRealizations()

def figuredBassScale():
    fbScale1 = figuredBass.realizerScale. \
        FiguredBassScale("D", "major")
    print fbScale1.getSamplePitches("E3", "6")


def exampleD():
    eD = figuredBass.examples.exampleD()
    eD.fbRules.allowVoiceOverlap = True
    eD.realize()
    eD.showRandomRealizations(20)
    
def featureExtraction():
    exampleFB = converter.parse('d:/desktop/example1b.xml')
    fe1 = features.jSymbolic.\
         PitchClassDistributionFeature(exampleFB)
    print fe1.extract().vector
    # [0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.6666666666666666, 0.0, 0.0, 1.0, 0.0, 0.0]
    n1 = exampleFB.parts[0][1][5]
    n1.expressions.append(expressions.Turn())
    x = expressions.realizeOrnaments(n1)
    n2 = exampleFB.parts[0][2][2]
    n2.expressions.append(expressions.Mordent())
    y = expressions.realizeOrnaments(n2)
    
    exampleFB.parts[0][1].elements = [exampleFB.parts[0][1][4]]
    exampleFB.parts[0][1].append(x)
    exampleFB.parts[0][2].elements = [exampleFB.parts[0][2][0], exampleFB.parts[0][2][1]]
    exampleFB.parts[0][2].append(y)
    
    fb1 = figuredBass.realizer.figuredBassFromStream(exampleFB.parts[1])
    fb1.realize()
    sol1 = fb1.generateRandomRealization()
    
    exampleFBOut = stream.Score()
    exampleFBOut.insert(0, exampleFB.parts[0])
    exampleFBOut.insert(0, sol1.parts[0])
    exampleFBOut.insert(0, sol1.parts[1])

    fe1.setData(exampleFBOut)
    print fe1.extract().vector
    #[0.0, 0.5, 1.0, 0.0, 0.6000000000000001, 0.0, 0.4, 0.2, 0.0, 0.7000000000000001, 0.0, 0.1]
    # exampleFBOut.show()

#figuredBassScale()
featureExtraction()
#prepareChinaEurope()
#testDataSet()
#testFictaFeature()
#example2()


#------------------------------------------------------------------------------
# eof
